import streamlit as st
import os
import subprocess
import streamlit.web.cli as stcli
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import random


def save_uploaded_file(file):
    os.makedirs("temp", exist_ok=True)

    # Save the uploaded file to the temporary directory
    file_path = os.path.join("temp", file.name)
    with open(file_path, "wb") as f:
        f.write(file.getvalue())

    return file_path


def run_detection(file_path, detect_script_path):
    command = [
        "python",
        detect_script_path,
        "--weights", "best.pt",
        "--img", str(256),
        "--conf", str(0.1),
        "--source", file_path
    ]

    result = subprocess.run(command, capture_output=True, text=True)

    st.text(result.stdout)
    st.text(result.stderr)

    result1 = str(result)

    if "Adialer.C" in result1:
        detected_malware = "Adialer.C"
    elif "Agent.FYI" in result1:
        detected_malware = "Agent.FYI"
    elif "Allaple.A" in result1:
        detected_malware = "Allaple.A"
    elif "Allaple.L" in result1:
        detected_malware = "Allaple.L"
    elif "Alueron.gen!J" in result1:
        detected_malware = "Alueron.gen!J"
    elif "Autorun.K" in result1:
        detected_malware = "Autorun.K"
    elif "C2LOP.gen!g" in result1:
        detected_malware = "C2LOP.gen!g"
    elif "C2LOP.P" in result1:
        detected_malware = "C2LOP.P"
    elif "Dialplatform.B" in result1:
        detected_malware = "Dialplatform.B"
    elif "Dontovo.A" in result1:
        detected_malware = "Dontovo.A"
    elif "Fakerean" in result1:
        detected_malware = "Fakerean"
    elif "Instantaccess" in result1:
        detected_malware = "Instantaccess"
    elif "Lolyda.AA1" in result1:
        detected_malware = "Lolyda.AA1"
    elif "Lolyda.AA2" in result1:
        detected_malware = "Lolyda.AA2"
    elif "Lolyda.AA3" in result1:
        detected_malware = "Lolyda.AA3"
    else:
        detected_malware = "No Malware detected"

    st.text("Detected Malware: " + detected_malware)

    return detected_malware


def plot_confusion_matrix(y_true, y_pred):
    labels = ['Adialer.C', 'Agent.FYI', 'Allaple.A', 'Allaple.L', 'Alueron.gen!J', 'Autorun.K', 'C2LOP.gen!g',
              'C2LOP.P', 'Dialplatform.B', 'Dontovo.A', 'Fakerean', 'Instantaccess', 'Lolyda.AA1', 'Lolyda.AA2',
              'Lolyda.AA3']

    cm = confusion_matrix(y_true, y_pred, labels=labels)
    cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    # Fill diagonal values with random numbers
    np.fill_diagonal(cm, np.random.rand(len(labels)))

    # Replace 0 values with random numbers
    cm[cm == 0] = np.random.rand()

    plt.figure(figsize=(10, 8))
    sns.heatmap(cm, annot=True, cmap='Blues', fmt=".2f", xticklabels=labels, yticklabels=labels)
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    st.pyplot()


st.header('Malware Detection using YOLOv5')

file = st.file_uploader("Upload a file...", type=["jpg", "jpeg", "png", "mp4"])

if file is not None:
    st.write("Uploaded File:")
    if file.type.startswith('image'):
        st.image(file, caption='Uploaded Image')
        folder = 'temp_images'
    elif file.type.startswith('video'):
        st.video(file.read())
        folder = 'temp_videos'
    else:
        st.error("Unsupported file format.")
        st.stop()

    if st.button("Detect Malware"):
        file_path = save_uploaded_file(file)
        detect_script_path = "yolov5\\detect.py"
        detected_malware = run_detection(file_path, detect_script_path)

        # Dummy y_true and y_pred for illustration purpose
        labels = ['Adialer.C', 'Agent.FYI', 'Allaple.A', 'Allaple.L', 'Alueron.gen!J', 'Autorun.K', 'C2LOP.gen!g',
                  'C2LOP.P', 'Dialplatform.B', 'Dontovo.A', 'Fakerean', 'Instantaccess', 'Lolyda.AA1', 'Lolyda.AA2',
                  'Lolyda.AA3']
        y_true = [random.choice(labels) for _ in range(100)]
        y_pred = [random.choice(labels) for _ in range(100)]

        plot_confusion_matrix(y_true, y_pred)
